PRAGMA foreign_keys=OFF;
BEGIN TRANSACTION;
CREATE TABLE IF NOT EXISTS "django_migrations" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "app" varchar(255) NOT NULL, "name" varchar(255) NOT NULL, "applied" datetime NOT NULL);
INSERT INTO django_migrations VALUES(1,'contenttypes','0001_initial','2023-05-29 10:31:50.833969');
INSERT INTO django_migrations VALUES(2,'contenttypes','0002_remove_content_type_name','2023-05-29 10:31:50.941709');
INSERT INTO django_migrations VALUES(3,'auth','0001_initial','2023-05-29 10:31:51.186054');
INSERT INTO django_migrations VALUES(4,'auth','0002_alter_permission_name_max_length','2023-05-29 10:31:51.262820');
INSERT INTO django_migrations VALUES(5,'auth','0003_alter_user_email_max_length','2023-05-29 10:31:51.358456');
INSERT INTO django_migrations VALUES(6,'auth','0004_alter_user_username_opts','2023-05-29 10:31:51.425308');
INSERT INTO django_migrations VALUES(7,'auth','0005_alter_user_last_login_null','2023-05-29 10:31:51.484120');
INSERT INTO django_migrations VALUES(8,'auth','0006_require_contenttypes_0002','2023-05-29 10:31:51.544958');
INSERT INTO django_migrations VALUES(9,'auth','0007_alter_validators_add_error_messages','2023-05-29 10:31:51.601806');
INSERT INTO django_migrations VALUES(10,'auth','0008_alter_user_username_max_length','2023-05-29 10:31:51.665634');
INSERT INTO django_migrations VALUES(11,'auth','0009_alter_user_last_name_max_length','2023-05-29 10:31:51.725475');
INSERT INTO django_migrations VALUES(12,'auth','0010_alter_group_name_max_length','2023-05-29 10:31:51.819224');
INSERT INTO django_migrations VALUES(13,'auth','0011_update_proxy_permissions','2023-05-29 10:31:51.909377');
INSERT INTO django_migrations VALUES(14,'auth','0012_alter_user_first_name_max_length','2023-05-29 10:31:51.975177');
INSERT INTO django_migrations VALUES(15,'accounts','0001_initial','2023-05-29 10:31:52.112873');
INSERT INTO django_migrations VALUES(16,'admin','0001_initial','2023-05-29 10:31:52.246391');
INSERT INTO django_migrations VALUES(17,'admin','0002_logentry_remove_auto_add','2023-05-29 10:31:52.330318');
INSERT INTO django_migrations VALUES(18,'admin','0003_logentry_add_action_flag_choices','2023-05-29 10:31:52.466385');
INSERT INTO django_migrations VALUES(19,'authtoken','0001_initial','2023-05-29 10:31:52.554118');
INSERT INTO django_migrations VALUES(20,'authtoken','0002_auto_20160226_1747','2023-05-29 10:31:52.647897');
INSERT INTO django_migrations VALUES(21,'authtoken','0003_tokenproxy','2023-05-29 10:31:52.749081');
INSERT INTO django_migrations VALUES(22,'sessions','0001_initial','2023-05-29 10:31:52.896733');
INSERT INTO django_migrations VALUES(23,'accounts','0002_alter_user_options_alter_user_table','2023-05-29 10:36:03.322248');
INSERT INTO django_migrations VALUES(24,'accounts','0003_auto_20230608_1807','2023-06-08 12:37:27.279161');
INSERT INTO django_migrations VALUES(25,'accounts','0004_auto_20230608_1810','2023-06-08 12:40:08.642199');
INSERT INTO django_migrations VALUES(26,'accounts','0005_auto_20230609_1132','2023-06-09 06:02:59.093282');
INSERT INTO django_migrations VALUES(27,'accounts','0006_auto_20230609_1225','2023-06-09 06:55:57.924853');
CREATE TABLE IF NOT EXISTS "django_content_type" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "app_label" varchar(100) NOT NULL, "model" varchar(100) NOT NULL);
INSERT INTO django_content_type VALUES(1,'admin','logentry');
INSERT INTO django_content_type VALUES(2,'auth','permission');
INSERT INTO django_content_type VALUES(3,'auth','group');
INSERT INTO django_content_type VALUES(4,'contenttypes','contenttype');
INSERT INTO django_content_type VALUES(5,'sessions','session');
INSERT INTO django_content_type VALUES(6,'accounts','user');
INSERT INTO django_content_type VALUES(7,'authtoken','token');
INSERT INTO django_content_type VALUES(8,'authtoken','tokenproxy');
INSERT INTO django_content_type VALUES(9,'accounts','post');
CREATE TABLE IF NOT EXISTS "auth_group_permissions" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "group_id" integer NOT NULL REFERENCES "auth_group" ("id") DEFERRABLE INITIALLY DEFERRED, "permission_id" integer NOT NULL REFERENCES "auth_permission" ("id") DEFERRABLE INITIALLY DEFERRED);
CREATE TABLE IF NOT EXISTS "auth_permission" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "content_type_id" integer NOT NULL REFERENCES "django_content_type" ("id") DEFERRABLE INITIALLY DEFERRED, "codename" varchar(100) NOT NULL, "name" varchar(255) NOT NULL);
INSERT INTO auth_permission VALUES(1,1,'add_logentry','Can add log entry');
INSERT INTO auth_permission VALUES(2,1,'change_logentry','Can change log entry');
INSERT INTO auth_permission VALUES(3,1,'delete_logentry','Can delete log entry');
INSERT INTO auth_permission VALUES(4,1,'view_logentry','Can view log entry');
INSERT INTO auth_permission VALUES(5,2,'add_permission','Can add permission');
INSERT INTO auth_permission VALUES(6,2,'change_permission','Can change permission');
INSERT INTO auth_permission VALUES(7,2,'delete_permission','Can delete permission');
INSERT INTO auth_permission VALUES(8,2,'view_permission','Can view permission');
INSERT INTO auth_permission VALUES(9,3,'add_group','Can add group');
INSERT INTO auth_permission VALUES(10,3,'change_group','Can change group');
INSERT INTO auth_permission VALUES(11,3,'delete_group','Can delete group');
INSERT INTO auth_permission VALUES(12,3,'view_group','Can view group');
INSERT INTO auth_permission VALUES(13,4,'add_contenttype','Can add content type');
INSERT INTO auth_permission VALUES(14,4,'change_contenttype','Can change content type');
INSERT INTO auth_permission VALUES(15,4,'delete_contenttype','Can delete content type');
INSERT INTO auth_permission VALUES(16,4,'view_contenttype','Can view content type');
INSERT INTO auth_permission VALUES(17,5,'add_session','Can add session');
INSERT INTO auth_permission VALUES(18,5,'change_session','Can change session');
INSERT INTO auth_permission VALUES(19,5,'delete_session','Can delete session');
INSERT INTO auth_permission VALUES(20,5,'view_session','Can view session');
INSERT INTO auth_permission VALUES(21,6,'add_user','Can add user');
INSERT INTO auth_permission VALUES(22,6,'change_user','Can change user');
INSERT INTO auth_permission VALUES(23,6,'delete_user','Can delete user');
INSERT INTO auth_permission VALUES(24,6,'view_user','Can view user');
INSERT INTO auth_permission VALUES(25,7,'add_token','Can add Token');
INSERT INTO auth_permission VALUES(26,7,'change_token','Can change Token');
INSERT INTO auth_permission VALUES(27,7,'delete_token','Can delete Token');
INSERT INTO auth_permission VALUES(28,7,'view_token','Can view Token');
INSERT INTO auth_permission VALUES(29,8,'add_tokenproxy','Can add token');
INSERT INTO auth_permission VALUES(30,8,'change_tokenproxy','Can change token');
INSERT INTO auth_permission VALUES(31,8,'delete_tokenproxy','Can delete token');
INSERT INTO auth_permission VALUES(32,8,'view_tokenproxy','Can view token');
INSERT INTO auth_permission VALUES(33,9,'add_postshubhi','Can add post shubhi');
INSERT INTO auth_permission VALUES(34,9,'change_postshubhi','Can change post shubhi');
INSERT INTO auth_permission VALUES(35,9,'delete_postshubhi','Can delete post shubhi');
INSERT INTO auth_permission VALUES(36,9,'view_postshubhi','Can view post shubhi');
INSERT INTO auth_permission VALUES(37,9,'add_post','Can add post');
INSERT INTO auth_permission VALUES(38,9,'change_post','Can change post');
INSERT INTO auth_permission VALUES(39,9,'delete_post','Can delete post');
INSERT INTO auth_permission VALUES(40,9,'view_post','Can view post');
CREATE TABLE IF NOT EXISTS "auth_group" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "name" varchar(150) NOT NULL UNIQUE);
CREATE TABLE IF NOT EXISTS "tbl_user_groups" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "user_id" bigint NOT NULL REFERENCES "tbl_user" ("id") DEFERRABLE INITIALLY DEFERRED, "group_id" integer NOT NULL REFERENCES "auth_group" ("id") DEFERRABLE INITIALLY DEFERRED);
CREATE TABLE IF NOT EXISTS "tbl_user_user_permissions" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "user_id" bigint NOT NULL REFERENCES "tbl_user" ("id") DEFERRABLE INITIALLY DEFERRED, "permission_id" integer NOT NULL REFERENCES "auth_permission" ("id") DEFERRABLE INITIALLY DEFERRED);
CREATE TABLE IF NOT EXISTS "django_admin_log" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "object_id" text NULL, "object_repr" varchar(200) NOT NULL, "action_flag" smallint unsigned NOT NULL CHECK ("action_flag" >= 0), "change_message" text NOT NULL, "content_type_id" integer NULL REFERENCES "django_content_type" ("id") DEFERRABLE INITIALLY DEFERRED, "user_id" bigint NOT NULL REFERENCES "tbl_user" ("id") DEFERRABLE INITIALLY DEFERRED, "action_time" datetime NOT NULL);
INSERT INTO django_admin_log VALUES(1,'1','Serializers in Django REST Framework are responsible for converting objects into data types understandable by javascript and front-end frameworks. Serializers also provide deserialization, allowing pa',3,'',9,1,'2023-06-09 06:37:59.686486');
INSERT INTO django_admin_log VALUES(2,'2','create admin',1,'[{"added": {}}]',9,1,'2023-06-09 06:56:40.139506');
INSERT INTO django_admin_log VALUES(3,'31','Nested Serializers in Django',3,'',9,1,'2023-06-12 06:08:32.133981');
INSERT INTO django_admin_log VALUES(4,'30','Nested Serializers in Django',3,'',9,1,'2023-06-12 06:08:32.186016');
INSERT INTO django_admin_log VALUES(5,'29','Nested Serializers in Django',3,'',9,1,'2023-06-12 06:08:32.252832');
INSERT INTO django_admin_log VALUES(6,'28','Nested Serializers in Django',3,'',9,1,'2023-06-12 06:08:32.338766');
INSERT INTO django_admin_log VALUES(7,'27','Nested Serializers in Django',3,'',9,1,'2023-06-12 06:08:32.505491');
INSERT INTO django_admin_log VALUES(8,'26','Nested Serializers in Django',3,'',9,1,'2023-06-12 06:08:32.645796');
INSERT INTO django_admin_log VALUES(9,'25','Nested Serializers in Django',3,'',9,1,'2023-06-12 06:08:32.771691');
INSERT INTO django_admin_log VALUES(10,'24','Nested Serializers in Django',3,'',9,1,'2023-06-12 06:08:32.854450');
INSERT INTO django_admin_log VALUES(11,'23','Nested Serializers in Django',3,'',9,1,'2023-06-12 06:08:32.910694');
INSERT INTO django_admin_log VALUES(12,'22','Nested Serializers in Django',3,'',9,1,'2023-06-12 06:08:32.987503');
INSERT INTO django_admin_log VALUES(13,'21','Nested Serializers in Django',3,'',9,1,'2023-06-12 06:08:33.061300');
INSERT INTO django_admin_log VALUES(14,'20','Nested Serializers in Django',3,'',9,1,'2023-06-12 06:08:33.127913');
INSERT INTO django_admin_log VALUES(15,'19','Nested Serializers in Django',3,'',9,1,'2023-06-12 06:08:33.194374');
INSERT INTO django_admin_log VALUES(16,'18','Nested Serializers in Django',3,'',9,1,'2023-06-12 06:08:33.253108');
INSERT INTO django_admin_log VALUES(17,'17','Nested Serializers in Django',3,'',9,1,'2023-06-12 06:08:33.328020');
INSERT INTO django_admin_log VALUES(18,'16','Nested Serializers in Django',3,'',9,1,'2023-06-12 06:08:33.403182');
INSERT INTO django_admin_log VALUES(19,'15','Nested Serializers in Django',3,'',9,1,'2023-06-12 06:08:33.478312');
INSERT INTO django_admin_log VALUES(20,'14','Nested Serializers in Django',3,'',9,1,'2023-06-12 06:08:33.544891');
INSERT INTO django_admin_log VALUES(21,'13','Nested Serializers in Django',3,'',9,1,'2023-06-12 06:08:33.610768');
INSERT INTO django_admin_log VALUES(22,'12','Nested Serializers in Django',3,'',9,1,'2023-06-12 06:08:33.671263');
INSERT INTO django_admin_log VALUES(23,'11','Nested Serializers in Django',3,'',9,1,'2023-06-12 06:08:33.729642');
INSERT INTO django_admin_log VALUES(24,'10','Nested Serializers in Django',3,'',9,1,'2023-06-12 06:08:33.807624');
INSERT INTO django_admin_log VALUES(25,'9','Nested Serializers in Django',3,'',9,1,'2023-06-12 06:08:33.913524');
INSERT INTO django_admin_log VALUES(26,'8','Nested Serializers in Django',3,'',9,1,'2023-06-12 06:08:34.070396');
INSERT INTO django_admin_log VALUES(27,'7','Nested Serializers in Django',3,'',9,1,'2023-06-12 06:08:34.154065');
INSERT INTO django_admin_log VALUES(28,'6','Nested Serializers in Django',3,'',9,1,'2023-06-12 06:08:34.304169');
INSERT INTO django_admin_log VALUES(29,'8','liveuser',1,'[{"added": {}}]',6,1,'2023-06-13 10:37:39.547950');
INSERT INTO django_admin_log VALUES(30,'8','liveuser',2,'[]',6,1,'2023-06-13 10:38:19.875257');
INSERT INTO django_admin_log VALUES(31,'8','liveuser',2,'[]',6,1,'2023-06-13 10:51:22.306239');
INSERT INTO django_admin_log VALUES(32,'8','liveuser',2,'[]',6,1,'2023-06-13 10:51:59.073315');
INSERT INTO django_admin_log VALUES(33,'8','liveuser',2,'[]',6,1,'2023-06-13 10:55:46.540022');
INSERT INTO django_admin_log VALUES(34,'9','kajal',1,'[{"added": {}}]',6,1,'2023-06-13 10:58:34.885224');
INSERT INTO django_admin_log VALUES(35,'9','kajal',2,'[]',6,1,'2023-06-13 11:28:14.841598');
INSERT INTO django_admin_log VALUES(36,'39','Nested Serializers in Django',3,'',9,1,'2023-06-13 12:21:37.721107');
INSERT INTO django_admin_log VALUES(37,'38','Nested Serializers in Django',3,'',9,1,'2023-06-13 12:21:37.862702');
INSERT INTO django_admin_log VALUES(38,'9','kajal',2,'[]',6,1,'2023-06-13 12:44:43.637963');
INSERT INTO django_admin_log VALUES(39,'36','Nested Serializers in Django',2,'[]',9,1,'2023-06-14 10:45:20.793552');
INSERT INTO django_admin_log VALUES(40,'37','Nested Serializers in Django',2,'[]',9,1,'2023-06-14 10:47:39.435422');
INSERT INTO django_admin_log VALUES(41,'9','kajal',2,'[]',6,1,'2023-06-14 10:50:01.698482');
INSERT INTO django_admin_log VALUES(42,'9','kajal',2,'[{"changed": {"fields": ["Last name"]}}]',6,1,'2023-06-14 10:51:17.670922');
INSERT INTO django_admin_log VALUES(43,'9','kajal',2,'[]',6,1,'2023-06-14 10:53:09.347141');
INSERT INTO django_admin_log VALUES(44,'5','Nested Serializers in Django',2,'[]',9,1,'2023-06-19 10:41:49.106265');
CREATE TABLE IF NOT EXISTS "authtoken_token" ("key" varchar(40) NOT NULL PRIMARY KEY, "created" datetime NOT NULL, "user_id" bigint NOT NULL UNIQUE REFERENCES "tbl_user" ("id") DEFERRABLE INITIALLY DEFERRED);
INSERT INTO authtoken_token VALUES('2e9acdd0cbf32d3f3436ec4829cadae2cff8f4be','2023-06-06 12:16:26.049247',6);
INSERT INTO authtoken_token VALUES('8e9b23cc8d47ff158be1f9a1c3fdbf37650e819e','2023-06-06 12:45:41.656127',7);
CREATE TABLE IF NOT EXISTS "django_session" ("session_key" varchar(40) NOT NULL PRIMARY KEY, "session_data" text NOT NULL, "expire_date" datetime NOT NULL);
INSERT INTO django_session VALUES('obgka4rmgb9p6uuk65mtbkjq42ymi760','.eJxVjDEOwjAMRe-SGUU2rkPCyN4zVE4caAElUtNOiLtDpQ6w_vfef5lB1mUc1pbnYVJzNmgOv1uU9MhlA3qXcqs21bLMU7SbYnfabF81Py-7-3cwShu_tYsnf3WMFIiQc2BkENIsqB34EMih9yk5PUKIxMAdglOSkLzrANi8P6uANiI:1q4xxv:QGgAQJSr85-8AHg873V80gNzpddwB1GNZQDRszb10FU','2023-06-16 06:08:47.693401');
INSERT INTO django_session VALUES('dykk1v5aa685srdbvtiyp3ppuwlztgg5','ODdmMTFhMWFmMjM3NWY4NzBmNTk0NzQwODFlOGQ2N2E0MTA1ZWQ5OTp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2hhc2giOiJhNGM5N2E4MzhlMWNhZGUzYTc0NDZjMzkyMTk4NjA5MzBiMGQ1NWRmIn0=','2023-06-28 07:49:37.089110');
INSERT INTO django_session VALUES('tv6qqad893io7uhj0jloui4nichwtt4m','ODdmMTFhMWFmMjM3NWY4NzBmNTk0NzQwODFlOGQ2N2E0MTA1ZWQ5OTp7Il9hdXRoX3VzZXJfaWQiOiIxIiwiX2F1dGhfdXNlcl9iYWNrZW5kIjoiZGphbmdvLmNvbnRyaWIuYXV0aC5iYWNrZW5kcy5Nb2RlbEJhY2tlbmQiLCJfYXV0aF91c2VyX2hhc2giOiJhNGM5N2E4MzhlMWNhZGUzYTc0NDZjMzkyMTk4NjA5MzBiMGQ1NWRmIn0=','2023-06-28 09:18:06.249224');
CREATE TABLE IF NOT EXISTS "tbl_user" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "last_login" datetime NULL, "is_superuser" bool NOT NULL, "is_staff" bool NOT NULL, "is_active" bool NOT NULL, "date_joined" datetime NOT NULL, "first_name" varchar(50) NOT NULL, "last_name" varchar(50) NOT NULL, "email" varchar(254) NOT NULL UNIQUE, "password" varchar(50) NOT NULL, "username" varchar(50) NOT NULL UNIQUE, "DOB" date NOT NULL);
INSERT INTO tbl_user VALUES(1,'2023-06-14 09:18:06.246913',1,1,1,'2023-05-29 10:33:20.637991','','','admin@ssi.com','pbkdf2_sha256$180000$nDH1pqQrBwKP$qB0Q0CdGOwNHBtasPQBFbFAaLNZwlvPPe25MId9klDw=','admin','2023-05-29');
INSERT INTO tbl_user VALUES(2,NULL,0,0,1,'2023-05-29 11:59:23.256669','shubi','SSI','shubi@jobma.com','pbkdf2_sha256$600000$eKf6yTNU4osMD3AtCybyC9$NRLYtTxKjCfWLz8GDO1y4DrIRzfOQsDJGPFKXCKU2Pk=','shubi01','2023-05-29');
INSERT INTO tbl_user VALUES(3,NULL,0,0,1,'2023-05-29 12:27:43.914275','shubi','SSI','iamshubi12@jobma.com','pbkdf2_sha256$600000$o6mgTw4cDZpfFmpCGnaB9l$Jif/agUWRFr74Dal/7UhLPCfphCvTOPLhscuEtwwIUI=','shubi014','2023-05-29');
INSERT INTO tbl_user VALUES(4,NULL,0,0,1,'2023-05-30 05:37:32.043899','shubi','SSI','iamshubi12gfh@jobma.com','pbkdf2_sha256$600000$k7nOPk9oTJTuTek9ZS0rrV$t+ezhr+3MsJreHa+/ecwJ6pv8C4v0mtz+erTLs7wK4o=','shubhi','2023-05-30');
INSERT INTO tbl_user VALUES(5,NULL,0,0,1,'2023-06-02 07:52:16.391664','Shubhi','Goel','shubhigoel@gmail.com','shubhi123','shubhi_goel','2023-06-02');
INSERT INTO tbl_user VALUES(6,NULL,0,0,1,'2023-06-02 11:44:53.520185','Shubhi','Goel','shubhigoel1@gmail.com','pbkdf2_sha256$216000$hNBdMrQjZClH$jTkwWK+kt3/5K2xBnZAFAU41YbQ3oFYqwNm/XWGn6XA=','shubhi_goel1','2023-06-02');
INSERT INTO tbl_user VALUES(7,NULL,0,0,1,'2023-06-06 12:45:05.904235','Navjot','singh','navjot_singh@gmail.com','pbkdf2_sha256$180000$D7xZUNSlVcqL$koYVvOOGk+H22VrnJQB9ec59WQGr4Aau9JIP37mXHvo=','navjot_singh','2023-06-06');
INSERT INTO tbl_user VALUES(8,NULL,0,0,1,'2023-06-13 10:36:57','ssssss','gggg','liveuser@gmail.com','shubhi123','liveuser','2023-06-13');
INSERT INTO tbl_user VALUES(9,NULL,0,0,1,'2023-06-13 10:57:47','kajal','tiwari','kajal@gmail.com','kajal123','kajal','2023-06-13');
CREATE TABLE IF NOT EXISTS "accounts_post" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "title" varchar(50) NOT NULL, "text" text NOT NULL, "created_date" datetime NOT NULL, "last_updated" datetime NOT NULL, "user_id" integer NOT NULL REFERENCES "tbl_user" ("id") DEFERRABLE INITIALLY DEFERRED);
INSERT INTO accounts_post VALUES(2,'create admin','verbose_name_plural=''blog''','2023-06-09 06:56:23','2023-06-09 06:56:40.130584',7);
INSERT INTO accounts_post VALUES(3,'serializers','Serializers in Django REST Framework are responsible for converting objects into data types understandable by javascript and front-end frameworks. Serializers also provide deserialization, allowing parsed data to be converted back into complex types, after first validating the incoming data. The serializers in REST framework work very similarly to Django’s Form and ModelForm classes. The two major serializers that are most popularly used are ModelSerializer and HyperLinkedModelSerialzer.','2023-06-09 08:46:12.710868','2023-06-09 08:46:12.711872',7);
INSERT INTO accounts_post VALUES(4,'serializers','Serializers in Django REST Framework are responsible for converting objects into data types understandable by javascript and front-end frameworks. Serializers also provide deserialization, allowing parsed data to be converted back into complex types, after first validating the incoming data. The serializers in REST framework work very similarly to Django’s Form and ModelForm classes. The two major serializers that are most popularly used are ModelSerializer and HyperLinkedModelSerialzer.','2023-06-09 08:49:17.737221','2023-06-09 08:49:17.737221',7);
INSERT INTO accounts_post VALUES(5,'Nested Serializers in Django','Django Rest Framework (DRF) allows you to use serializers to convert complex data types, such as Django models, into Python data types that can then be easily rendered into JSON or other content types. You can use serializers in a nested manner to handle more complex relationships between models.','2023-06-09 09:19:06','2023-06-09 09:19:06.147074',7);
INSERT INTO accounts_post VALUES(32,'Nested Serializers in Django','Django Rest Framework (DRF) allows you to use serializers to convert complex data types, such as Django models, into Python data types that can then be easily rendered into JSON or other content types. You can use serializers in a nested manner to handle more complex relationships between models.','2023-06-12 08:12:36.549896','2023-06-12 08:12:36.550899',7);
INSERT INTO accounts_post VALUES(33,'Nested Serializers in Django','Django Rest Framework (DRF) allows you to use serializers to convert complex data types, such as Django models, into Python data types that can then be easily rendered into JSON or other content types. You can use serializers in a nested manner to handle more complex relationships between models.','2023-06-12 08:25:39.671820','2023-06-12 08:25:39.671820',7);
INSERT INTO accounts_post VALUES(34,'Nested Serializers in Django','Django Rest Framework (DRF) allows you to use serializers to convert complex data types, such as Django models, into Python data types that can then be easily rendered into JSON or other content types. You can use serializers in a nested manner to handle more complex relationships between models.','2023-06-12 09:48:39.518615','2023-06-12 09:48:39.519612',7);
INSERT INTO accounts_post VALUES(35,'Nested Serializers in Django','Django Rest Framework (DRF) allows you to use serializers to convert complex data types, such as Django models, into Python data types that can then be easily rendered into JSON or other content types. You can use serializers in a nested manner to handle more complex relationships between models.','2023-06-12 09:50:30.347431','2023-06-12 09:50:30.348428',7);
INSERT INTO accounts_post VALUES(36,'Nested Serializers in Django','Django Rest Framework (DRF) allows you to use serializers to convert complex data types, such as Django models, into Python data types that can then be easily rendered into JSON or other content types. You can use serializers in a nested manner to handle more complex relationships between models.','2023-06-12 09:51:45','2023-06-12 09:51:45.385428',7);
INSERT INTO accounts_post VALUES(37,'Nested Serializers in Django','Django Rest Framework (DRF) allows you to use serializers to convert complex data types, such as Django models, into Python data types that can then be easily rendered into JSON or other content types. You can use serializers in a nested manner to handle more complex relationships between models.','2023-06-12 09:53:17','2023-06-12 09:53:17.737327',7);
DELETE FROM sqlite_sequence;
INSERT INTO sqlite_sequence VALUES('django_migrations',27);
INSERT INTO sqlite_sequence VALUES('django_content_type',9);
INSERT INTO sqlite_sequence VALUES('auth_permission',40);
INSERT INTO sqlite_sequence VALUES('auth_group',0);
INSERT INTO sqlite_sequence VALUES('django_admin_log',44);
INSERT INTO sqlite_sequence VALUES('tbl_user',9);
INSERT INTO sqlite_sequence VALUES('accounts_post',39);
CREATE UNIQUE INDEX "django_content_type_app_label_model_76bd3d3b_uniq" ON "django_content_type" ("app_label", "model");
CREATE UNIQUE INDEX "auth_group_permissions_group_id_permission_id_0cd325b0_uniq" ON "auth_group_permissions" ("group_id", "permission_id");
CREATE INDEX "auth_group_permissions_group_id_b120cbf9" ON "auth_group_permissions" ("group_id");
CREATE INDEX "auth_group_permissions_permission_id_84c5c92e" ON "auth_group_permissions" ("permission_id");
CREATE UNIQUE INDEX "auth_permission_content_type_id_codename_01ab375a_uniq" ON "auth_permission" ("content_type_id", "codename");
CREATE INDEX "auth_permission_content_type_id_2f476e4b" ON "auth_permission" ("content_type_id");
CREATE UNIQUE INDEX "accounts_user_groups_user_id_group_id_59c0b32f_uniq" ON "tbl_user_groups" ("user_id", "group_id");
CREATE INDEX "accounts_user_groups_user_id_52b62117" ON "tbl_user_groups" ("user_id");
CREATE INDEX "accounts_user_groups_group_id_bd11a704" ON "tbl_user_groups" ("group_id");
CREATE UNIQUE INDEX "accounts_user_user_permissions_user_id_permission_id_2ab516c2_uniq" ON "tbl_user_user_permissions" ("user_id", "permission_id");
CREATE INDEX "accounts_user_user_permissions_user_id_e4f0a161" ON "tbl_user_user_permissions" ("user_id");
CREATE INDEX "accounts_user_user_permissions_permission_id_113bb443" ON "tbl_user_user_permissions" ("permission_id");
CREATE INDEX "django_admin_log_content_type_id_c4bce8eb" ON "django_admin_log" ("content_type_id");
CREATE INDEX "django_admin_log_user_id_c564eba6" ON "django_admin_log" ("user_id");
CREATE INDEX "django_session_expire_date_a5c62663" ON "django_session" ("expire_date");
CREATE INDEX "accounts_postshubhi_user_id_c7b9e796" ON "accounts_post" ("user_id");
COMMIT;
